AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CloudtrailBucket:
    Type: String
    Description: S3 Bucket with cloudtrail logs
  LambdaS3Bucket:
    Type: String
    Description: S3 Bucket with lambda function code
  LambdaS3Key:
    Type: String
    Description: S3 Key with lambda function code
  DynamoDBTableName:
    Type: String
    Description: S3 Key with lambda function code
  SQSQueueName:
    Type: String
    Description: Name of SQS queue with athena query events
  SNSAnomalyDetectionTopicName:
    Type: String
    Description: Name of SNS queue with anomaly detection events
  RequestsLayer:
    Type: String
    Description: ARN address of Lambda Layer with python3's requests - you may need to host your own
Resources:
  S3CloudtrailLambdaPolicy:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - CloudtrailHandlerLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !Join
                  - ''
                  - - 'arn:aws:sqs:*:*:'
                    - !Ref SQSQueueName
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:SendMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !Join
                  - ''
                  - - 'arn:aws:sqs:*:*:'
                    - 'athena_alerter_anomaly_detection'
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: !Join
                  - ''
                  - - 'arn:aws:dynamodb:*:*:table/'
                    - !Ref DynamoDBTableName
              - Effect: Allow
                Action:
                  - 'athena:GetQueryExecution'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref CloudtrailBucket
                    - /*
  CloudtrailHandlerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Description: Handles cloudtrail logs and writes athena queries to DynamoDB
      FunctionName: athena_alerter_cloudtrail_handler
      Handler: cloudtrail_handler.lambda_handler
      Layers:
        - !Ref RequestsLayer
      MemorySize: 128
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 10
  UsageUpdateLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Description: Updates athena data scanned stats in DynamoDB
      FunctionName: athena_alerter_usage_updater
      Handler: usage_update.lambda_handler
      Layers:
        - !Ref RequestsLayer
      MemorySize: 128
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 10
  NotificationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: !Ref LambdaS3Key
      Description: Updates athena data scanned stats in DynamoDB
      FunctionName: athena_alerter_notification
      Handler: notification.lambda_handler
      Layers:
        - !Ref RequestsLayer
      MemorySize: 128
      Role: !GetAtt
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      Timeout: 10
  ScheduledRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: ScheduledRule
      ScheduleExpression: 'rate(1 minute)'
      Targets:
        - Arn: !GetAtt
            - UsageUpdateLambda
            - Arn
          Id: UsageUpdateLambda
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref UsageUpdateLambda
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - ScheduledRule
        - Arn
  EventSourceMappingNotifierAnomalyDetection:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: 'arn:aws:sqs:us-east-1:170047911957:athena_alerter_anomaly_detection'
      FunctionName: !GetAtt
        - NotificationLambda
        - Arn
      BatchSize: 1
